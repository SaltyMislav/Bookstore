Module Bookstore
{
    Entity Book
    {
        ShortString Code { Unique; Required; AutoCode; }
        ShortString Title { Required; }
        Integer NumberOfPages { MaxValue 50; }
        Reference Author Bookstore.Person;
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
        Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
    }

    Browse BookGrid Bookstore.Book
    {
        Take Title;
        Take 'Author.Name';
        Take NumberOfTopics 'Extension_NmbTopic.NumberOfTopics';
    }

    SqlQueryable NmbTopic <SQL\NmbTopic.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfTopics;

        AutodetectSqlDependencies;
    }

    SqlQueryable BookInfo1
        "
            SELECT
                b.ID,
                NumberOfComments = COUNT(c.ID)
            FROM
                Bookstore.Book b
                LEFT JOIN Bookstore.Comment c ON c.BookID = b.ID
            GROUP BY
                b.ID
        "
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    SqlQueryable BookInfo <SQL\BookInfo.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    Computed ExpectedBookRating 'repository =>
        {
            var books = repository.Bookstore.Book.Query()
                .Select(b =>
                    new
                    {
                        b.ID,
                        b.Title,
                        IsForeign = b.Extension_ForeignBook.ID != null
                    })
                .ToList();

            var ratings = new List<ExpectedBookRating>();
            foreach (var book in books)
            {
                decimal rating = 0;

                if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 100;

                if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 50;

                if (book.IsForeign)
                    rating *= 1.2m;

                ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
            }

            return ratings.ToArray();
        }'
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }


    Entity Person
    {
        ShortString Name;
        DateTime DatumKreacije { Creationtime; DenyUserEdit; }

        Logging { AllProperties; }
    }

    Entity Comment
    {
        Reference Book { Detail; }

        LongString Text;

        Deactivatable;
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }
    Entity Topic
    {
        ShortString Name { Unique; Required; }
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Entity Employees
    {
        ShortString Name;
        Integer VAT { Unique; }

    }

    Entity Managers
    {
        Extends Bookstore.Employees;

        ShortString Bonuses;
    }

    Entity Education
    {
        Reference Employees;

        DateTime Datum { ModificationTimeOf Bookstore.Education.Description;}
        ShortString Description;
    }

    Entity Department
    {
        ShortString Code { Unique; }
        ShortString Description;
    }

    Entity EmployeeDepartment
    {
        Reference Employees;
        Reference Department;

        UniqueMultiple 'Employees Department';
    }

    Hardcoded Genre
    {
        ShortString Label;
        LongString Description;
        Bool IsFiction;

        Entry ScienceFiction
        {
            Value Label 'Science Fiction';
            Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
            Value IsFiction 1;
        }

        Entry Biography
        {
            Value Label 'Biography';
            Value Description 'A written narrative of a person''s life.';
            Value IsFiction 0;
        }
    }
}