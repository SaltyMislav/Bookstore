Module Bookstore
{
	Entity Shipment
	{
		ShortString TargetAddress;
		DateTime DeliveryDate;
		DateTime CreatedAt { CreationTime; }

		Is Bookstore.ShipmentEvent 'Creating'
		{
			Implements Bookstore.ShipmentEvent.EffectiveSince "CreatedAt";
			Implements Bookstore.ShipmentEvent.Shipment "ID";
			Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.Preparing;
		}
	}

	Entity ShipmentItem
	{
		Reference Shipment { Detail; }
		Reference Book;
	}

	Browse ShipmentGrid Bookstore.Shipment
	{
		Take TargetAddress;
		Take DeliveryDate;
		Take CurrentStatus 'Extension_ShipmentCurretState.Status.Name';
	}

	Polymorphic ShipmentEvent
	{
		DateTime EffectiveSince;
		Reference Shipment;
		Reference NewStatus Bookstore.ShipmentStatus;
	}

	Entity ApproveShipment
	{
		DateTime EffectiveSince { CreationTime; }
		Reference Shipment;

		LongString Explanation { Required; }

		Is Bookstore.ShipmentEvent
		{
			Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.Approved;
		}
	}

	Entity DeliveryStarted
	{
		DateTime EffectiveSince { Creationtime; }
		Reference Shipment;

		Is Bookstore.ShipmentEvent
		{
			Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.DeliveryInProgress;
		}
	}

	Entity DeliveryFinished
	{
		DateTime EffectiveSince { CreationTime; }
		Reference Shipment;

		Is Bookstore.ShipmentEvent
		{
			Implements Bookstore.ShipmentEvent.NewStatus Bookstore.ShipmentStatus.Delivered;
		}
	}
	
	Hardcoded ShipmentStatus
	{
		Entry Preparing;
		Entry Approved;
		Entry DeliveryInProgress;
		Entry Delivered;
	}

	SqlQueryable ComputeShipmentCurrentState <Sql\Shipment.sql>
	{
		Extends Bookstore.Shipment;
		Reference Status Bookstore.ShipmentStatus;

		ChangesOnLinkedItems Bookstore.ApproveShipment.Shipment;
		ChangesOnLinkedItems Bookstore.DeliveryStarted.Shipment;
		ChangesOnLinkedItems Bookstore.DeliveryFinished.Shipment;

		AutodetectSqlDependencies;
	}

	Entity ShipmentCurretState
	{
		ComputedFrom Bookstore.ComputeShipmentCurrentState
		{
			KeepSynchronized;
			AllProperties;
		}
	}
}